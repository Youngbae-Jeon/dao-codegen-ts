import { Generation } from '../config';
import { DaoClassGenerator } from './DaoClassGenerator';
import { ModelInterfaceGenerator } from './ModelInterfaceGenerator';
import { JsCoder } from './JsCoder';
import { ModulesCoder } from './ModulesCoder';
import { Table } from './table';
import { upperCamelCase } from './utils';

export class TsGenerator {
	private name: string;

	constructor(private table: Table, private options?: Generation['ts']) {
		this.name = upperCamelCase(`${options?.dataTypeName?.prefix || ''}_${table.modelName || table.name}_${options?.dataTypeName?.suffix || ''}`);
	}

	generate(): { name: string, content: string } {
		const modules = new ModulesCoder();

		const interfaceJs = new ModelInterfaceGenerator(this.table, this.options).generate(modules);

		let classJs: JsCoder | undefined = undefined;
		if (!this.options?.dataTypeOnly) {
			classJs = new DaoClassGenerator(this.table, this.options).generate(modules);
		}

		const coder = new JsCoder();
		this.writeHeader(coder);
		coder.add(modules.getCode());
		coder.add(interfaceJs);

		return {
			name: this.name,
			content: coder.toString()
		}
	}

	private writeHeader(coder: JsCoder) {
		coder.add(`
		// DO NOT EDIT THIS FILE:
		// This file is generated by dao-codegen-ts.
		`);
		coder.add('');
	}

}	