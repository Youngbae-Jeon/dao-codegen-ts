import _ from 'lodash';

import { JsCoder } from '../lib/JsCoder';
import { ModulesCoder } from '../lib/ModulesCoder';
import { IField, ITable } from '../model';
import { Config } from './spec';

function getImports(tables: ITable[], config: Config): string {
	const modules = new ModulesCoder();

	for (const table of tables) {
		modules.import(table.entityName + 'Data', './' + table.entityName);
	}

	return modules.toString();
}

function getPrimaryKeys(table: ITable): IField[] {
	let keyFields = _.filter(table.fields, (f) => f.pk);

	if (!keyFields.length) {
		const pkconstraint = _.find(table.constraints, (c) => c.match(/^PRIMARY\ KEY\(.*\)$/) ? true : false);
		if (!pkconstraint) throw new Error('No primary key for table: ' + table.name);

		const keyNames = pkconstraint.replace(/PRIMARY\ KEY\((.*)\)/, '$1').split(/,\s*/);
		if (!keyNames.length) throw new Error('No field in PRIMARY KEY');

		keyFields = [];
		for (const keyName of keyNames) {
			const field = _.find(table.fields, {name: keyName});
			if (!field) throw new Error('No such field of name: ' + keyName);
			keyFields.push(field);
		}
	}

	return keyFields;
}

export const generate_compound_interface = (compoundName: string, tables: ITable[], config: Config): string => {
	const js = new JsCoder();
	js.add(`
	/* DO NOT EDIT THIS FILE:
	 * This file is generated by mrshop-gencode project.
	 */`);

	js.add(getImports(tables, config).toString());

	const keys = getPrimaryKeys(tables[0]);

	// interface ~Data
	const extendNames = _.map(tables, (table) => table.entityName + 'Data');
	js.add(`export interface ${compoundName}Data extends ${extendNames.join(', ')} {}`);
	js.add('');

	// interface entityName
	js.add(`export interface ${compoundName} extends ${compoundName}Data {`);
	_.each(keys, (f) => {
		if (f.desc) {
			js.add(`/** ${f.desc} */`);
		}
		js.add(`${f.name}: ${f.jstype};`);
	});
	js.add('}');
	js.add('');

	return js.toString();
}